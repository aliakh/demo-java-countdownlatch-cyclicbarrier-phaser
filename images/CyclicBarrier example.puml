@startuml

!include sequence_diagram_header.iuml

participant "main" as main
participant "thread 1" as thread1
participant "thread 2" as thread2
participant "thread 3" as thread3

activate main
activate thread1
activate thread2
activate thread3

main->main: new CyclicBarrier(1+3)

note left
getNumberWaiting() == 0
end note

rnote over main
the barrier waits for 4 parties
end note

main->main: await()

note left
getNumberWaiting() == 1
end note

deactivate main

||50||

thread1 -> main: await()
deactivate thread1

note left
getNumberWaiting() == 2
end note

thread2 -> main: await()
deactivate thread2

note left
getNumberWaiting() == 3
end note

thread3 -> main: await()

note left
getNumberWaiting() == 0
end note

activate main
activate thread1
activate thread2

rnote over main
the barrier waits for 4 parties
end note

@enduml